package io.mycat.ice.mapping;

import io.mycat.ice.domain.IceProject;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface IceProjectMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ice_project
     *
     * @mbggenerated
     */
    @Delete({
        "delete from ice_project",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ice_project
     *
     * @mbggenerated
     */
    @Insert({
        "insert into ice_project (ID, OWNER, ",
        "NAME, VERSION, ICE_VERSION, ",
        "NOTE, LAST_UPDATED, ",
        "XML_SPEC)",
        "values (#{id,jdbcType=INTEGER}, #{owner,jdbcType=CHAR}, ",
        "#{name,jdbcType=VARCHAR}, #{version,jdbcType=CHAR}, #{iceVersion,jdbcType=CHAR}, ",
        "#{note,jdbcType=VARCHAR}, #{lastUpdated,jdbcType=TIMESTAMP}, ",
        "#{xmlSpec,jdbcType=LONGVARCHAR})"
    })
    int insert(IceProject record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ice_project
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, OWNER, NAME, VERSION, ICE_VERSION, NOTE, LAST_UPDATED, XML_SPEC",
        "from ice_project",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="OWNER", property="owner", jdbcType=JdbcType.CHAR),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.CHAR),
        @Result(column="ICE_VERSION", property="iceVersion", jdbcType=JdbcType.CHAR),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="XML_SPEC", property="xmlSpec", jdbcType=JdbcType.LONGVARCHAR)
    })
    IceProject selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ice_project
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, OWNER, NAME, VERSION, ICE_VERSION, NOTE, LAST_UPDATED, XML_SPEC",
        "from ice_project"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="OWNER", property="owner", jdbcType=JdbcType.CHAR),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.CHAR),
        @Result(column="ICE_VERSION", property="iceVersion", jdbcType=JdbcType.CHAR),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="XML_SPEC", property="xmlSpec", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<IceProject> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ice_project
     *
     * @mbggenerated
     */
    @Update({
        "update ice_project",
        "set OWNER = #{owner,jdbcType=CHAR},",
          "NAME = #{name,jdbcType=VARCHAR},",
          "VERSION = #{version,jdbcType=CHAR},",
          "ICE_VERSION = #{iceVersion,jdbcType=CHAR},",
          "NOTE = #{note,jdbcType=VARCHAR},",
          "LAST_UPDATED = #{lastUpdated,jdbcType=TIMESTAMP},",
          "XML_SPEC = #{xmlSpec,jdbcType=LONGVARCHAR}",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(IceProject record);
}